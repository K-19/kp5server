package kursach;

import javafx.util.Pair;
import kursach.tables.*;
import org.postgresql.util.PSQLException;

import java.io.*;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;

public class DatabaseHandler extends Config {
    Connection dbConnection;
    Socket client;

    public Connection getDbConnection() throws ClassNotFoundException, SQLException {
        try {
            String connectionString = "jdbc:postgresql://" + dbHost + ":" + dbPort + "/" + dbName;
            Class.forName("org.postgresql.Driver");
            dbConnection = DriverManager.getConnection(connectionString, dbUser, dbPass);
            MainController.dbConnecting("Подключена");
        } catch (ClassNotFoundException | SQLException e) {
            MainController.dbConnecting("Ошибка!");
            throw e;
        }
        return dbConnection;
    }

    public DatabaseHandler(Socket client) {
        this.client = client;
    }


    public void initialDB() {
        try {
            MainController.logMessage("Проверка готовности базы данных...");
            String DB_URL = "jdbc:postgresql://" + dbHost + "/";
            Class.forName("org.postgresql.Driver");
            dbConnection = DriverManager.getConnection(DB_URL, dbUser, dbPass);
            Statement stmt = dbConnection.createStatement();
            File file = new File("generate_db.sql");
            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));
            StringBuilder builder = new StringBuilder(100);
            while(reader.ready()) {
                builder.append(reader.readLine()).append("\n");
            }
            stmt.executeUpdate(builder.toString());
            dbConnection.close();

        } catch (Exception e) {
            try {
                dbConnection.close();
                return;
            } catch (Exception e1) {return;}
        }




//            String sqlCreateDB = "CREATE DATABASE \"" + dbName + "\"\n" +
//                    "    WITH \n" +
//                    "    OWNER = " + dbUser + "\n" +
//                    "    ENCODING = 'UTF8'\n" +
//                    "    LC_COLLATE = 'Russian_Russia.1251'\n" +
//                    "    LC_CTYPE = 'Russian_Russia.1251'\n" +
//                    "    TABLESPACE = pg_default\n" +
//                    "    CONNECTION LIMIT = -1;";
//            stmt.executeUpdate(sqlCreateDB);
//
//            MainController.dbConnecting("Создание базы данных...");
//            MainController.logMessage("Создание базы данных...");
//            dbConnection.close();
//
//            DB_URL = "jdbc:postgresql://" + dbHost + ":" + dbPort + "/" + dbName;
//            dbConnection = DriverManager.getConnection(DB_URL, dbUser, dbPass);
//            stmt = dbConnection.createStatement();
//
//
//            String createFulldb = "CREATE SCHEMA users\n" +
//                    "    AUTHORIZATION postgres;\n\n" +
//                    "CREATE TABLE users.users\n" +
//                    "(\n" +
//                    "    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),\n" +
//                    "    n_passport character(9) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    idn_passport character(14) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    n_phone character(20) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    email character(70) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    password character(50) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    birthday character(50) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    registrday character(50) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    isadmin boolean NOT NULL,\n" +
//                    "    login character(50) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    name character(50) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    lastname character(50) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    CONSTRAINT users_pkey PRIMARY KEY (id),\n" +
//                    "    CONSTRAINT uniqevalues1 UNIQUE (login),\n" +
//                    "    CONSTRAINT uniqevalues2 UNIQUE (n_passport),\n" +
//                    "    CONSTRAINT uniqevalues3 UNIQUE (idn_passport)\n" +
//                    ")\n" +
//                    "\n" +
//                    "TABLESPACE pg_default;\n" +
//                    "\n" +
//                    "ALTER TABLE users.users\n" +
//                    "    OWNER to postgres;\n\n" +
//                    "INSERT INTO users.users(\n" +
//                    "\tid, n_passport, idn_passport, n_phone, email, password, birthday, registrday, isadmin, login, name, lastname)\n" +
//                    "\tVALUES (1, 'AB1234567', '1234567A123AA1', '375291234567', 'admin@mail.ru', 'admin', '01-07-2001', '01-07-2001', true, 'admin', 'Admin', 'Adminovich');\n\n" +
//                    "CREATE TABLE users.vehicleapplications\n" +
//                    "(\n" +
//                    "    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 100000 MINVALUE 100000 MAXVALUE 2147483647 CACHE 1 ),\n" +
//                    "    id_user integer NOT NULL,\n" +
//                    "    term bigint NOT NULL,\n" +
//                    "    beginterm character(50) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    insurancefee character(30) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    typeofpayment character(30) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    executepersson character(30) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    drivingexperience integer NOT NULL,\n" +
//                    "    vehiclemodel character(50) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    registersign character(8) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    bodynumber character(6) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    enginedisplacement character(10) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    liftingcapacity character(10) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    numberofseats integer NOT NULL,\n" +
//                    "    enginepower integer NOT NULL,\n" +
//                    "    roadaccidents integer NOT NULL,\n" +
//                    "    yearofcreated integer NOT NULL,\n" +
//                    "    battery character(10) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    processed boolean NOT NULL,\n" +
//                    "    CONSTRAINT vehicleapplications_pkey PRIMARY KEY (id),\n" +
//                    "    CONSTRAINT constr1 UNIQUE (registersign)\n" +
//                    ")\n" +
//                    "\n" +
//                    "TABLESPACE pg_default;\n" +
//                    "\n" +
//                    "ALTER TABLE users.vehicleapplications\n" +
//                    "    OWNER to postgres;\n\n" +
//                    "CREATE TABLE users.propertyapplications\n" +
//                    "(\n" +
//                    "    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 200000 MINVALUE 200000 MAXVALUE 2147483647 CACHE 1 ),\n" +
//                    "    id_user integer NOT NULL,\n" +
//                    "    term bigint NOT NULL,\n" +
//                    "    beginterm character(50) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    insurancefee character(30) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    typeofpayment character(30) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    executepersson character(30) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    address character(100) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    area integer NOT NULL,\n" +
//                    "    rooms integer NOT NULL,\n" +
//                    "    yearofcreated integer NOT NULL,\n" +
//                    "    propfloor integer NOT NULL,\n" +
//                    "    doors integer NOT NULL,\n" +
//                    "    steeldoor boolean NOT NULL,\n" +
//                    "    codelock boolean NOT NULL,\n" +
//                    "    unfiresystem boolean NOT NULL,\n" +
//                    "    securitysystem boolean NOT NULL,\n" +
//                    "    unfirematerial boolean NOT NULL,\n" +
//                    "    highrisk boolean NOT NULL,\n" +
//                    "    processed boolean NOT NULL,\n" +
//                    "    CONSTRAINT propertyapplications_pkey PRIMARY KEY (id),\n" +
//                    "    CONSTRAINT constr2 UNIQUE (address)\n" +
//                    ")\n" +
//                    "\n" +
//                    "TABLESPACE pg_default;\n" +
//                    "\n" +
//                    "ALTER TABLE users.propertyapplications\n" +
//                    "    OWNER to postgres;\n\n" +
//                    "CREATE TABLE users.healthapplications\n" +
//                    "(\n" +
//                    "    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 300000 MINVALUE 300000 MAXVALUE 2147483647 CACHE 1 ),\n" +
//                    "    id_user integer NOT NULL,\n" +
//                    "    term bigint NOT NULL,\n" +
//                    "    beginterm character(50) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    insurancefee character(30) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    typeofpayment character(30) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    executepersson character(30) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    harmhappend boolean NOT NULL,\n" +
//                    "    healthhappend boolean NOT NULL,\n" +
//                    "    invalidhappend boolean NOT NULL,\n" +
//                    "    deathill boolean NOT NULL,\n" +
//                    "    covid boolean NOT NULL,\n" +
//                    "    sport boolean NOT NULL,\n" +
//                    "    relax boolean NOT NULL,\n" +
//                    "    invalid12 boolean NOT NULL,\n" +
//                    "    processed boolean NOT NULL,\n" +
//                    "    CONSTRAINT healthapplications_pkey PRIMARY KEY (id),\n" +
//                    "    CONSTRAINT constr3 UNIQUE (id_user)\n" +
//                    ")\n" +
//                    "\n" +
//                    "TABLESPACE pg_default;\n" +
//                    "\n" +
//                    "ALTER TABLE users.healthapplications\n" +
//                    "    OWNER to postgres;\n\n" +
//                    "CREATE TABLE users.contracts\n" +
//                    "(\n" +
//                    "    id integer NOT NULL,\n" +
//                    "    id_admin integer NOT NULL,\n" +
//                    "    dateodpay integer NOT NULL,\n" +
//                    "    summofpayment character(50) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    paymonthcost character(50) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    CONSTRAINT contracts_pkey PRIMARY KEY (id)\n" +
//                    ")\n" +
//                    "\n" +
//                    "TABLESPACE pg_default;\n" +
//                    "\n" +
//                    "ALTER TABLE users.contracts\n" +
//                    "    OWNER to postgres;\n\n" +
//                    "CREATE TABLE users.techsupport\n" +
//                    "(\n" +
//                    "    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 200000 MINVALUE 200000 MAXVALUE 2147483647 CACHE 1 ),\n" +
//                    "    id_user integer NOT NULL,\n" +
//                    "    question text COLLATE pg_catalog.\"default\" NOT NULL,\n" +
//                    "    closed boolean NOT NULL,\n" +
//                    "    id_admin integer,\n" +
//                    "    answer text COLLATE pg_catalog.\"default\",\n" +
//                    "    CONSTRAINT techsupport_pkey PRIMARY KEY (id)\n" +
//                    ")\n" +
//                    "\n" +
//                    "TABLESPACE pg_default;\n" +
//                    "\n" +
//                    "ALTER TABLE users.techsupport\n" +
//                    "    OWNER to postgres;";
//            stmt.executeUpdate(createFulldb);
//            dbConnection.close();
//            MainController.logMessage("База данных создана");
//        } catch (Exception e) {
//            try {
//                dbConnection.close();
//            } catch(Exception e1) {
//
//            }
//        }
    }

    public String getInfoForPairChart() {
        String result = "";
        ResultSet rs;
        try {
            Statement stms = getDbConnection().createStatement();
            String query = "SELECT COUNT(*) AS count FROM " + Const.CONTRACT_TABLE + " WHERE (" + Const.CONTRACT_ID + " >= 100000) AND (id < 200000)";
            rs = stms.executeQuery(query);
            rs.next();
            result += rs.getInt(1) + Const.DELIMITER;
            query = "SELECT COUNT(*) AS count FROM " + Const.CONTRACT_TABLE + " WHERE (" + Const.CONTRACT_ID + " >= 200000) AND (id < 300000)";
            rs = stms.executeQuery(query);
            rs.next();
            result += rs.getInt(1) + Const.DELIMITER;
            query = "SELECT COUNT(*) AS count FROM " + Const.CONTRACT_TABLE + " WHERE " + Const.CONTRACT_ID + " >= 300000";
            rs = stms.executeQuery(query);
            rs.next();
            result += rs.getInt(1);
            dbConnection.close();
            MainController.logMessage("Запрос кругового графика: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
            return result;
        } catch (Exception e) {
            return "false";
        }
    }

    public String getInfoForBarChart() {
        String result = "";
        ResultSet rs, rscount;
        try {
            Statement stms = getDbConnection().createStatement();

            ArrayList<Integer> array = new ArrayList<>();
            String queryUsers = "SELECT " + Const.USER_ID + " FROM " + Const.USER_TABLE + " WHERE " + Const.USER_IS_ADMIN + " = false";
            rs = stms.executeQuery(queryUsers);
            while(rs.next()) {
                int idUser = rs.getInt(1);
                int count = 0;
                String queryV = "SELECT COUNT(*) AS count FROM " + Const.VEHICLE_APP_TABLE + " WHERE (" + Const.VEHICLE_APP_ID_USER + " = " + idUser + ") AND (" + Const.VEHICLE_APP_PROCESSED + " = true)";
                rscount = stms.executeQuery(queryV);
                rscount.next();
                count += rscount.getInt(1);
                String queryP = "SELECT COUNT(*) AS count FROM " + Const.PROPERTY_APP_TABLE + " WHERE (" + Const.PROPERTY_APP_ID_USER + " = " + idUser + ") AND (" + Const.PROPERTY_APP_PROCESSED + " = true)";
                rscount = stms.executeQuery(queryP);
                rscount.next();
                count += rscount.getInt(1);
                String queryH = "SELECT COUNT(*) AS count FROM " + Const.HEALTH_APP_TABLE + " WHERE (" + Const.HEALTH_APP_ID_USER + " = " + idUser + ") AND (" + Const.HEALTH_APP_PROCESSED + " = true)";
                rscount = stms.executeQuery(queryH);
                rscount.next();
                count += rscount.getInt(1);
                array.add(count);
            }

            for (int i = 0; i <= Collections.max(array); i++) {
                int userCount = 0;
                for (Integer temp : array) {
                    if(temp == i) userCount++;
                }
                result += userCount + Const.DELIMITER;
            }
            result = result.substring(0, result.length() - 1);


            dbConnection.close();
            MainController.logMessage("Запрос диаграммы: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
            return result;
        } catch (Exception e) {
            return "false";
        }
    }

    public String getUserInfo(String userLogin, String userPass) {
        String query = "SELECT * FROM " + Const.USER_TABLE + " WHERE (" +
                Const.USER_LOGIN + " = '" + userLogin + "') AND (" +
                Const.USER_PASSWORD + " = '" + userPass + "')";
        ResultSet rs = null;
        String result = "";
        try {
            Statement stms = getDbConnection().createStatement();
            rs = stms.executeQuery(query);
            result = parseResultToString(rs);
            dbConnection.close();
        } catch (Exception e) {
            try {
                if (!dbConnection.isClosed()) dbConnection.close();
            } catch (Exception e1) {}
        }
        if ("".equals(result)) return "Пользователь с такими данными не найден";
        result = result.substring(0, result.length() - 1);
        String name = result.split(Const.DELIMITER)[9];
        MainController.logMessage("Авторизация " + name + ": " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        return result;
    }

    public String getUserInfo(String userId) {
        String query = "SELECT * FROM " + Const.USER_TABLE + " WHERE (" +
                Const.USER_ID + " = " + userId + ")";
        ResultSet rs = null;
        String result = "";
        try {
            Statement stms = getDbConnection().createStatement();
            rs = stms.executeQuery(query);
            result = parseResultToString(rs);
            dbConnection.close();

        } catch (Exception e) {
            //System.out.println(e);
        }
        if ("".equals(result)) return result;
        result = result.substring(0, result.length() - 1);
        String name = result.split(Const.DELIMITER)[9];
        MainController.logMessage("Запрос информации о пользователе " + name + ": " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        return result;
    }

    public String editUser(String[] param) {
        UsersTable table = new UsersTable();
        StringBuilder query = new StringBuilder("UPDATE " + table.getNameTable() + " SET ");

        int i = 1;
        for(Pair<String, Object> pair : table.getColumnsForUpdate()) {
            query.append(pair.getKey())
                 .append("=");
            if(param[i] instanceof String) query.append("'").append(param[i++]).append("',");
            else query.append(param[i++]).append(",");
        }
        query.deleteCharAt(query.length() - 1);
        query.append(" WHERE ").append(Const.USER_ID).append("=").append(param[10]);
        //System.out.println(query.toString());
        try {
            getDbConnection().prepareStatement(query.toString()).executeUpdate();
            dbConnection.close();
            MainController.logMessage("Администратор обновил данные о пользователях: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
            return "true";
        } catch (Exception e) {
            return e.toString();
        }
    }

    public String getAllUsers() {
        String query = "SELECT * FROM " + Const.USER_TABLE;
        ResultSet rs = null;
        String result = "";
        try {
            Statement stms = getDbConnection().createStatement();
            rs = stms.executeQuery(query);
            result = parseResultToString(rs);
            dbConnection.close();
            MainController.logMessage("Запрос информации обо всех пользователях: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());

        } catch (Exception e) {
            result = result.substring(0, result.length() - 1);
            return result;
        }
        result = result.substring(0, result.length() - 1);
        return result;
    }

    public String getAllQuestions() {
        String query = "SELECT " + Const.TECHSUPPORT_ID + "," + Const.TECHSUPPORT_ID_USER + "," + Const.TECHSUPPORT_QUESTION + " FROM " + Const.TECHSUPPORT_TABLE + " WHERE " + Const.TECHSUPPORT_CLOSED + " = false";
        ResultSet rs = null;
        String result = "";
        try {
            Statement stms = getDbConnection().createStatement();
            rs = stms.executeQuery(query);
            String id, id_user, text;
            while (rs.next()) {
                id = Integer.toString(rs.getInt(1));
                id_user = Integer.toString(rs.getInt(2));
                text = rs.getString(3);
                result += concatStrings(id, id_user, text);
                result += "/";
            }
            dbConnection.close();
            MainController.logMessage("Получение администратором списка вопросов: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());

        } catch (Exception e) {
            //System.out.println(e);
            try { dbConnection.close();} catch (Exception e1) {}
            return "false";
        }
        if (result.equals("")) return "false";
        result = result.substring(0, result.length() - 1);
        return result;
    }

    private String parseResultToString(ResultSet rs) throws SQLException{
        String result = "", iD, nPass, nIdPass, nPhone, email, password, birthday, registrDay, isAdmin, login, name, lastName;
        while (rs.next()) {
            iD = Integer.toString(rs.getInt(1)).trim();
            nPass = rs.getString(2).trim();
            nIdPass = rs.getString(3).trim();
            nPhone = rs.getString(4).trim();
            email = rs.getString(5).trim();
            password = rs.getString(6).trim();
            birthday = rs.getString(7).trim();
            registrDay = rs.getString(8).trim();
            isAdmin = Boolean.toString(rs.getBoolean(9)).trim();
            login = rs.getString(10).trim();
            name = rs.getString(11).trim();
            lastName = rs.getString(12).trim();

            result += concatStrings(iD, nPass, nIdPass, nPhone, email, password, birthday, registrDay, isAdmin, login, name, lastName);
            result += "/";
        }
        //result = result.substring(0, result.length() - 1);
        return result;
    }

    public String getAllApps() {
        String result = "";
        String query1 = "SELECT " +
                Const.VEHICLE_APP_ID + "," +
                Const.VEHICLE_APP_MODEL + "," +
                Const.VEHICLE_APP_SIGN + " FROM " +
                Const.VEHICLE_APP_TABLE + " WHERE " + Const.VEHICLE_APP_PROCESSED + " = false";
        String query2 = "SELECT " +
                Const.PROPERTY_APP_ID + "," +
                Const.PROPERTY_APP_ADDRESS + "," +
                Const.PROPERTY_APP_ROOMS + " FROM " +
                Const.PROPERTY_APP_TABLE + " WHERE " + Const.PROPERTY_APP_PROCESSED + " = false";
        String query3 = "SELECT " +
                Const.HEALTH_APP_ID + "," +
                Const.HEALTH_APP_ID_USER + " FROM " +
                Const.HEALTH_APP_TABLE + " WHERE " + Const.HEALTH_APP_PROCESSED + " = false";
        //System.out.println(query1);
        //System.out.println(query2);
        //System.out.println(query3);

        ResultSet rs = null;
        try {
            Statement stms = getDbConnection().createStatement();
            rs = stms.executeQuery(query1);
            while (rs.next()) {
                String iDapp = Integer.toString(rs.getInt(1)).trim();
                String type = "Автомобиль";
                String model = rs.getString(2).trim();
                String regNumber = rs.getString(3).trim();
                result += concatStrings(iDapp, type, model, regNumber);
                result += "/";
            }
            rs = stms.executeQuery(query2);
            while (rs.next()) {
                String iDapp = Integer.toString(rs.getInt(1)).trim();
                String type = "Недвижимость";
                String model = rs.getString(2).trim();
                String regNumber = Integer.toString(rs.getInt(3));
                result += concatStrings(iDapp, type, model, regNumber);
                result += "/";
            }
            rs = stms.executeQuery(query3);
            while (rs.next()) {
                String iDapp = Integer.toString(rs.getInt(1)).trim();
                String type = "Здоровье";
                ResultSet rsname = stms.executeQuery("SELECT " + Const.USER_NAME + "," + Const.USER_LASTNAME + " FROM " + Const.USER_TABLE + " WHERE " + Const.USER_ID + " = " + Integer.toString(rs.getInt(2)));
                rsname.next();
                result += concatStrings(iDapp, type, rsname.getString(1), rsname.getString(2));
                result += "/";
            }
            dbConnection.close();
            MainController.logMessage("Админ-запрос всех заявлений: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        } catch (Exception e) {
            //System.out.println(e);
        }
        if ("".equals(result)) return result;
        result = result.substring(0, result.length() - 1);
        return result;
    }

    public String viewContract(String[] parametrs) {
        Integer number = Integer.parseInt(parametrs[1]);

        String query = "SELECT * FROM " + Const.CONTRACT_TABLE + " WHERE " + Const.CONTRACT_ID + " = " + number;
        String result = "";
        try {
            Statement stms = getDbConnection().createStatement();
            ResultSet rs = stms.executeQuery(query);
            dbConnection.close();
            if(!rs.next()) return "false";
            result = concatStrings(
                    Integer.toString(rs.getInt(1)),
                    Integer.toString(rs.getInt(2)),
                    Integer.toString(rs.getInt(3)),
                    rs.getString(4),
                    rs.getString(5));
                    MainController.logMessage("Запрос договора №:" + result.split(Const.DELIMITER)[0]+ " : " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        } catch (Exception e) { return e.toString(); }
        return result;
    }

    public String getAllContracts() {
        String result = "";
        String query = "SELECT " +
                Const.CONTRACT_ID + "," +
                Const.CONTRACT_SUM + "," +
                Const.CONTRACT_PER_MONTH + " FROM " +
                Const.CONTRACT_TABLE;


        //System.out.println(query);

        ResultSet rs = null;
        try {
            Statement stms = getDbConnection().createStatement();
            rs = stms.executeQuery(query);
            while (rs.next()) {
                String idContract = Integer.toString(rs.getInt(1)).trim();
                String type = " ";
                String name = " ";
                String number = " ";
                Integer intId = Integer.parseInt(idContract);
                if (intId >= 300000) {
                    type = "Здоровье";
                    ResultSet rs1 = stms.executeQuery("SELECT " + Const.HEALTH_APP_ID_USER + " FROM " + Const.HEALTH_APP_TABLE + " WHERE " + Const.HEALTH_APP_ID + " = " + Integer.toString(rs.getInt(1)));
                    rs1.next();
                    ResultSet rsname = stms.executeQuery("SELECT " + Const.USER_NAME + "," + Const.USER_LASTNAME + " FROM " + Const.USER_TABLE + " WHERE " + Const.USER_ID + " = " + Integer.toString(rs1.getInt(1)));
                    rsname.next();
                    name = rsname.getString(1);
                    number = rsname.getString(2);
                }
                else if (intId >= 200000) {
                    type = "Недвижимость";
                    ResultSet rsname = stms.executeQuery("SELECT " + Const.PROPERTY_APP_ADDRESS + "," + Const.PROPERTY_APP_ROOMS + " FROM " + Const.PROPERTY_APP_TABLE + " WHERE " + Const.PROPERTY_APP_ID + " = " + idContract);
                    rsname.next();
                    name = rsname.getString(1).trim();
                    number = Integer.toString(rsname.getInt(2));
                }
                else if (intId >= 100000) {
                    type = "Автомобиль";
                    ResultSet rsname = stms.executeQuery("SELECT " + Const.VEHICLE_APP_MODEL + "," + Const.VEHICLE_APP_SIGN + " FROM " + Const.VEHICLE_APP_TABLE + " WHERE " + Const.VEHICLE_APP_ID + " = " + idContract);
                    rsname.next();
                    name = rsname.getString(1).trim();
                    number = rsname.getString(2).trim();
                }

                String sum = rs.getString(2).trim();
                String per = rs.getString(3).trim();
                result += concatStrings(idContract, type, name, number, sum, per);
                result += "/";
            }
            dbConnection.close();
            MainController.logMessage("Админ-запрос всех договоров: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        } catch (Exception e) {
            //System.out.println(e);
        }
        if ("".equals(result)) return result;
        result = result.substring(0, result.length() - 1);
        return result;
    }

    public String getListOfContracts(String id) {
        String result = "";
        String query1 = "SELECT " +
                "C." + Const.CONTRACT_ID + "," +
                "V." + Const.VEHICLE_APP_MODEL + "," +
                "V." + Const.VEHICLE_APP_SIGN + "," +
                "C." + Const.CONTRACT_SUM + "," +
                "C." + Const.CONTRACT_PER_MONTH + " FROM " +
                Const.CONTRACT_TABLE + " C " + " INNER JOIN " + Const.VEHICLE_APP_TABLE + " V ON " +
                "C." + Const.CONTRACT_ID + " = " +
                "V." + Const.VEHICLE_APP_ID + " WHERE " +
                "V." + Const.VEHICLE_APP_ID_USER + " = " + id;
        //System.out.println(query1);
        String query2 = "SELECT " +
                "C." + Const.CONTRACT_ID + "," +
                "P." + Const.PROPERTY_APP_ADDRESS + "," +
                "P." + Const.PROPERTY_APP_ROOMS + "," +
                "C." + Const.CONTRACT_SUM + "," +
                "C." + Const.CONTRACT_PER_MONTH + " FROM " +
                Const.CONTRACT_TABLE + " C " + " INNER JOIN " + Const.PROPERTY_APP_TABLE + " P ON " +
                "C." + Const.CONTRACT_ID + " = " +
                "P." + Const.PROPERTY_APP_ID + " WHERE " +
                "P." + Const.PROPERTY_APP_ID_USER + " = " + id;
        //System.out.println(query2);

        String query3 = "SELECT " +
                "C." + Const.CONTRACT_ID + "," +
                "U." + Const.USER_NAME + "," +
                "U." + Const.USER_LASTNAME + "," +
                "C." + Const.CONTRACT_SUM + "," +
                "C." + Const.CONTRACT_PER_MONTH + " FROM " + Const.CONTRACT_TABLE + " C " +
                " INNER JOIN " + Const.HEALTH_APP_TABLE + " H ON " + "C." + Const.CONTRACT_ID + " = " + "H." + Const.HEALTH_APP_ID +
                " INNER JOIN " + Const.USER_TABLE + " U ON " + "H." + Const.HEALTH_APP_ID_USER + " = " + "U." + Const.USER_ID + " WHERE " +
                "H." + Const.HEALTH_APP_ID_USER + " = " + id;
        //System.out.println(query3);

        ResultSet rs = null;
        try {
            Statement stms = getDbConnection().createStatement();
            rs = stms.executeQuery(query1);
            while (rs.next()) {
                String idContract = Integer.toString(rs.getInt(1)).trim();
                String type = "Автомобиль";
                String model = rs.getString(2).trim();
                String regNumber = rs.getString(3).trim();
                String sum = rs.getString(4).trim();
                String per = rs.getString(5).trim();
                result += concatStrings(idContract, type, model, regNumber, sum, per);
                result += "/";
            }
            rs = stms.executeQuery(query2);
            while (rs.next()) {
                String idContract = Integer.toString(rs.getInt(1)).trim();
                String type = "Недвижимость";
                String address = rs.getString(2).trim();
                String rooms = Integer.toString(rs.getInt(3)).trim();
                String sum = rs.getString(4).trim();
                String per = rs.getString(5).trim();
                result += concatStrings(idContract, type, address, rooms, sum, per);
                result += "/";
            }
            rs = stms.executeQuery(query3);
            while (rs.next()) {
                String idContract = Integer.toString(rs.getInt(1)).trim();
                String type = "Здоровье";
                String name = rs.getString(2).trim();
                String lastname = rs.getString(3).trim();
                String sum = rs.getString(4).trim();
                String per = rs.getString(5).trim();
                result += concatStrings(idContract, type, name, lastname, sum, per);
                result += "/";
            }
            dbConnection.close();
            MainController.logMessage("Админ-запрос всех договоров: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        } catch (Exception e) {
            //System.out.println(e);
        }
        if ("".equals(result)) return result;
        result = result.substring(0, result.length() - 1);
        return result;
    }

    public String getApplicationsInfo(String idUser) {
        String query1 = "SELECT " +
                Const.VEHICLE_APP_ID + "," +
                Const.VEHICLE_APP_MODEL + "," +
                Const.VEHICLE_APP_SIGN + " FROM " +
                Const.VEHICLE_APP_TABLE + " WHERE (" +
                Const.VEHICLE_APP_ID_USER + " = '" + idUser + "') AND (" +
                Const.VEHICLE_APP_PROCESSED + " = false)";
        String query2 = "SELECT " +
                Const.PROPERTY_APP_ID + "," +
                Const.PROPERTY_APP_ADDRESS + "," +
                Const.PROPERTY_APP_ROOMS + " FROM " +
                Const.PROPERTY_APP_TABLE + " WHERE (" +
                Const.PROPERTY_APP_ID_USER + " = '" + idUser + "') AND (" +
                Const.PROPERTY_APP_PROCESSED + " = false)";
        String query3 = "SELECT " +
                Const.HEALTH_APP_ID + " FROM " +
                Const.HEALTH_APP_TABLE + " WHERE (" +
                Const.HEALTH_APP_ID_USER + " = '" + idUser + "') AND (" +
                Const.HEALTH_APP_PROCESSED + " = false)";
        //System.out.println(query1);
        //System.out.println(query2);
        //System.out.println(query3);

        String result = "";
        ResultSet rs = null;
        try {
            Statement stms = getDbConnection().createStatement();
            rs = stms.executeQuery(query1);
            while (rs.next()) {
                String iDapp = Integer.toString(rs.getInt(1)).trim();
                String type = "Автомобиль";
                String model = rs.getString(2).trim();
                String regNumber = rs.getString(3).trim();
                result += concatStrings(iDapp, type, model, regNumber);
                result += "/";
            }
            rs = stms.executeQuery(query2);
            while (rs.next()) {
                String iDapp = Integer.toString(rs.getInt(1)).trim();
                String type = "Недвижимость";
                String address = rs.getString(2).trim();
                String rooms = Integer.toString(rs.getInt(3));
                result += concatStrings(iDapp, type, address, rooms);
                result += "/";
            }
            rs = stms.executeQuery(query3);
            while (rs.next()) {
                String iDapp = Integer.toString(rs.getInt(1)).trim();
                String type = "Здоровье";
                result += concatStrings(iDapp, type, " ", " ");
                result += "/";
            }
            dbConnection.close();
            MainController.logMessage("Запрос заявлений: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        } catch (Exception e) {
            //System.out.println(e);
            if ("".equals(result)) return result;
            result = result.substring(0, result.length() - 1);
            return result;
        }
        if ("".equals(result)) return result;
        result = result.substring(0, result.length() - 1);
        return result;
    }

    public String getNextQuestion() {
        String query = "SELECT " + Const.TECHSUPPORT_ID + "," + Const.TECHSUPPORT_ID_USER + "," + Const.TECHSUPPORT_QUESTION + " FROM " + Const.TECHSUPPORT_TABLE + " WHERE " + Const.TECHSUPPORT_CLOSED + " = false " + " LIMIT 1";
        try {
            ResultSet rs = getDbConnection().createStatement().executeQuery(query);
            dbConnection.close();
            MainController.logMessage("Админ-запрос вопроса: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
            while(rs.next()) {
                return concatStrings(Integer.toString(rs.getInt(1)), Integer.toString(rs.getInt(2)), rs.getString(3));
            }
        } catch (Exception e) {
            //System.out.println(e);
            return "false";
        }
        return "false";
    }

    public String deleteQuestion(String id) {
        String query = "DELETE FROM " + Const.TECHSUPPORT_TABLE + " WHERE " + Const.TECHSUPPORT_ID + " = " + id;
        try {
            getDbConnection().createStatement().executeUpdate(query);
            dbConnection.close();
            MainController.logMessage("Удаление вопроса №" + id + " : " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        } catch (Exception e) {
            return e.toString();
        }
        return "true";
    }

    public String answerTheQuestion(String[] answer) {
        String query = "UPDATE " + Const.TECHSUPPORT_TABLE + " SET " +
                Const.TECHSUPPORT_CLOSED + " = true," +
                Const.TECHSUPPORT_ID_ADMIN + " = " + answer[4] + "," +
                Const.TECHSUPPORT_ANSWER + " = '" + answer[5] +
                "' WHERE " + Const.TECHSUPPORT_ID + " = " + answer[1];
        try {
            getDbConnection().createStatement().executeUpdate(query);
            dbConnection.close();
            MainController.logMessage("Ответ администратором ID" + answer[4] + " на вопрос №" + answer[5] + " : " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        } catch (Exception e) {
            return e.toString();
        }
        return "true";
    }

    public String historyAnswers(String id_user) {
        String query = "SELECT T." + Const.TECHSUPPORT_QUESTION + ",A." + Const.USER_NAME + ",A." + Const.USER_LASTNAME + ",T." + Const.TECHSUPPORT_ANSWER +
                " FROM " + Const.TECHSUPPORT_TABLE + " T " +
                " INNER JOIN " + Const.USER_TABLE + " A ON A." + Const.USER_ID + " = T." + Const.TECHSUPPORT_ID_ADMIN +
                " WHERE T." + Const.TECHSUPPORT_ID_USER + " = " + id_user;
        String result = "";
        ArrayList<String> list = new ArrayList<>();
        try {
            ResultSet rs = getDbConnection().createStatement().executeQuery(query);
            while(rs.next()) {
                String question = rs.getString(1).trim();
                if (question.length() > 30) question = question.substring(0, 40);
                String nameAdmin = rs.getString(2).trim();
                String surAdmin = rs.getString(3).trim();
                String answer = rs.getString(4).trim();
                list.add("Администратор " + nameAdmin + " " + surAdmin + " дал ответ на ваш вопрос \"" + question + "...\":\nadmin: " + answer + "\n\n");
            }
            if (list.size() == 0) return "Ответов не найдено";
            Collections.reverse(list);

            for (String str : list) {
                result += str;
            }
            dbConnection.close();
            MainController.logMessage("Запрос ответов администрации: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
            return result;

        } catch (Exception e) {
            return e.toString();
        }
    }

    public String getFileInfo(String fileName) {
        try {
            File file = new File(fileName);
            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));
            StringBuilder builder = new StringBuilder(100);
            while(reader.ready()) {
                builder.append(reader.readLine()).append("\n");
            }
            MainController.logMessage("Запрос файла " + fileName + ": " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
            return builder.toString();

        } catch (Exception e) {
            return "Ошибка! Напишите нам пожалуйста об этой проблеме в поддержку";
        }
    }

    public String setFileInfo(String fileName, String text) {
        try {
            File file = new File(fileName);
            //BufferedWriter writer = new BufferedWriter(new FileWriter(file));
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8));
            writer.write(text);
            writer.flush();
            writer.close();
            MainController.logMessage("Изменение файла " + fileName + ": " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
            return "true";
        } catch (Exception e) {
            return e.toString();
        }
    }

    public String getOneApp() throws SQLException, ClassNotFoundException {
        String result = "";
        ResultSet rs = null;
        String idUser = "";
        String appInfo = "";
        Statement stms = getDbConnection().createStatement();
        String query, query1, query2, query3, userInfo = "";
        query1 = "SELECT * FROM " + Const.VEHICLE_APP_TABLE + " WHERE " + Const.VEHICLE_APP_PROCESSED + " = false " + " LIMIT 1";
        query2 = "SELECT * FROM " + Const.PROPERTY_APP_TABLE + " WHERE " + Const.PROPERTY_APP_PROCESSED + " = false " + " LIMIT 1";
        query3 = "SELECT * FROM " + Const.HEALTH_APP_TABLE + " WHERE " + Const.HEALTH_APP_PROCESSED + " = false " + " LIMIT 1";
        String strCode = "";

        rs = stms.executeQuery(query1);
        while (rs.next()) {
            String iDapp = Integer.toString(rs.getInt(1)).trim();
            String iDuser = Integer.toString(rs.getInt(2)).trim();
            idUser = iDuser;
            String term = Integer.toString(rs.getInt(3)).trim();
            String beginTerm = rs.getString(4).trim();
            String fee = rs.getString(5).trim();
            String money = rs.getString(6).trim();
            String dolj = rs.getString(7).trim();
            String experiance = Integer.toString(rs.getInt(8)).trim();
            String model = rs.getString(9).trim();
            String regnSign = rs.getString(10).trim();
            String bodyNumb = rs.getString(11).trim();
            String vEngine = rs.getString(12).trim();
            String lifring = rs.getString(13).trim();
            String seats = Integer.toString(rs.getInt(14)).trim();
            String power = Integer.toString(rs.getInt(15)).trim();
            String accidents = Integer.toString(rs.getInt(16)).trim();
            String year = Integer.toString(rs.getInt(17)).trim();
            appInfo = concatStrings(iDapp, iDuser, term, beginTerm, fee, money, dolj, experiance, model, regnSign, bodyNumb, vEngine, lifring, seats, power, accidents, year);
            strCode = "2";
        }
        if ("".equals(appInfo)) {
            rs = stms.executeQuery(query2);

            while (rs.next()) {
                String iDapp = Integer.toString(rs.getInt(1)).trim();
                String iDuser = Integer.toString(rs.getInt(2)).trim();
                idUser = iDuser;
                String term = Integer.toString(rs.getInt(3)).trim();
                String beginTerm = rs.getString(4).trim();
                String fee = rs.getString(5).trim();
                String money = rs.getString(6).trim();
                String dolj = rs.getString(7).trim();
                String address = rs.getString(8).trim();
                String area = Integer.toString(rs.getInt(9)).trim();
                String rooms = Integer.toString(rs.getInt(10)).trim();
                String year = Integer.toString(rs.getInt(11)).trim();
                String floor = Integer.toString(rs.getInt(12)).trim();
                String doors = Integer.toString(rs.getInt(13)).trim();
                String steel = Boolean.toString(rs.getBoolean(14));
                String codelock = Boolean.toString(rs.getBoolean(15));
                String unfire = Boolean.toString(rs.getBoolean(16));
                String security = Boolean.toString(rs.getBoolean(17));
                String material = Boolean.toString(rs.getBoolean(18));
                String risk = Boolean.toString(rs.getBoolean(19));
                appInfo = concatStrings(iDapp, iDuser, term, beginTerm, fee, money, dolj, address, area, rooms, year, floor, doors, steel, codelock, unfire, security, material, risk);
                strCode = "1";
            }

        }
        if ("".equals(appInfo)) {
            rs = stms.executeQuery(query3);

            while (rs.next()) {
                String iDapp = Integer.toString(rs.getInt(1)).trim();
                String iDuser = Integer.toString(rs.getInt(2)).trim();
                idUser = iDuser;
                String term = Integer.toString(rs.getInt(3)).trim();
                String beginTerm = rs.getString(4).trim();
                String fee = rs.getString(5).trim();
                String money = rs.getString(6).trim();
                String dolj = rs.getString(7).trim();

                String harm = Boolean.toString(rs.getBoolean(8));
                String healthHap = Boolean.toString(rs.getBoolean(9));
                String invalidhap = Boolean.toString(rs.getBoolean(10));
                String death = Boolean.toString(rs.getBoolean(11));
                String covid = Boolean.toString(rs.getBoolean(12));
                String sport = Boolean.toString(rs.getBoolean(13));
                String relax = Boolean.toString(rs.getBoolean(14));
                String invalid12 = Boolean.toString(rs.getBoolean(15));


                appInfo = concatStrings(iDapp, iDuser, term, beginTerm, fee, money, dolj, harm, healthHap, invalidhap, death, covid, sport, relax, invalid12);
                strCode = "3";
            }

        }

        if ("".equals(appInfo)) {

        }
        if("".equals(appInfo)) return "false";

        if (!"".equals(appInfo)) {
            query = "SELECT * FROM " + Const.USER_TABLE + " WHERE " + Const.USER_ID + " = '" + idUser + "'";
            rs = stms.executeQuery(query);
            userInfo = parseResultToString(rs);
            userInfo = userInfo.substring(0, userInfo.length() - 1);
        }
        dbConnection.close();
        MainController.logMessage("Админ-запрос на обработку заявления: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        //System.out.println(appInfo);
        //System.out.println(userInfo);


        result = strCode + Const.DELIMITER + appInfo + Const.DELIMITER + userInfo;

        return result;
    }

    public String getAppFromId(Integer id, Integer idAdmin) throws Exception {
        String result = "";
        ResultSet rs = null;
        String appInfo = "";
        String contrInfo = "";
        Statement stms = getDbConnection().createStatement();
        String query, userInfo = "";

        String nameTable;
        String nameColumn;
        Integer type;

        if (id >= 300000) {
            nameTable = Const.HEALTH_APP_TABLE;
            nameColumn = Const.HEALTH_APP_ID;
            type = 3;
        }
        else if (id >= 200000) {
            nameTable = Const.PROPERTY_APP_TABLE;
            nameColumn = Const.PROPERTY_APP_ID;
            type = 2;
        }
        else if (id >= 100000) {
            nameTable = Const.VEHICLE_APP_TABLE;
            nameColumn = Const.VEHICLE_APP_ID;
            type = 1;
        }
        else return "error";

        query = "SELECT * FROM " + nameTable + " WHERE " + nameColumn + " = " + id;
        rs = stms.executeQuery(query);
        rs.next();


        String iDapp = Integer.toString(rs.getInt(1)).trim();
        String iDuser = Integer.toString(rs.getInt(2)).trim();
        String term = Integer.toString(rs.getInt(3)).trim();
        String beginTerm = rs.getString(4).trim();
        String fee = rs.getString(5).trim();
        String money = rs.getString(6).trim();
        String dolj = rs.getString(7).trim();
        switch (type) {
            case 1:

                String experiance = Integer.toString(rs.getInt(8)).trim();
                String model = rs.getString(9).trim();
                String regnSign = rs.getString(10).trim();
                String bodyNumb = rs.getString(11).trim();
                String vEngine = rs.getString(12).trim();
                String lifring = rs.getString(13).trim();
                String seats = Integer.toString(rs.getInt(14)).trim();
                String power = Integer.toString(rs.getInt(15)).trim();
                String accidents = Integer.toString(rs.getInt(16)).trim();
                String year = Integer.toString(rs.getInt(17)).trim();
                appInfo = concatStrings(iDapp, iDuser, term, beginTerm, fee, money, dolj, experiance, model, regnSign, bodyNumb, vEngine, lifring, seats, power, accidents, year);
                break;
            case 2:
                String address = rs.getString(8).trim();
                String area = Integer.toString(rs.getInt(9)).trim();
                String rooms = Integer.toString(rs.getInt(10)).trim();
                String yearCr = Integer.toString(rs.getInt(11)).trim();
                String floor = Integer.toString(rs.getInt(12)).trim();
                String doors = Integer.toString(rs.getInt(13)).trim();
                String steel = Boolean.toString(rs.getBoolean(14));
                String codelock = Boolean.toString(rs.getBoolean(15));
                String unfire = Boolean.toString(rs.getBoolean(16));
                String security = Boolean.toString(rs.getBoolean(17));
                String material = Boolean.toString(rs.getBoolean(18));
                String risk = Boolean.toString(rs.getBoolean(19));
                appInfo = concatStrings(iDapp, iDuser, term, beginTerm, fee, money, dolj, address, area, rooms, yearCr, floor, doors, steel, codelock, unfire, security, material, risk);
                break;
            case 3:
                String harm = Boolean.toString(rs.getBoolean(8));
                String healthHap = Boolean.toString(rs.getBoolean(9));
                String invalidhap = Boolean.toString(rs.getBoolean(10));
                String death = Boolean.toString(rs.getBoolean(11));
                String covid = Boolean.toString(rs.getBoolean(12));
                String sport = Boolean.toString(rs.getBoolean(13));
                String relax = Boolean.toString(rs.getBoolean(14));
                String invalid12 = Boolean.toString(rs.getBoolean(15));
                appInfo = concatStrings(iDapp, iDuser, term, beginTerm, fee, money, dolj, harm, healthHap, invalidhap, death, covid, sport, relax, invalid12);
                break;
        }

        if("".equals(appInfo)) return "false";
        else {
            query = "SELECT * FROM " + Const.USER_TABLE + " WHERE " + Const.USER_ID + " = '" + iDuser + "'";
            rs = stms.executeQuery(query);
            userInfo = parseResultToString(rs);
            userInfo = userInfo.substring(0, userInfo.length() - 1);

//            query = "SELECT " +
//                    "A." + Const.USER_NAME + "," +
//                    "A." + Const.USER_LASTNAME + " FROM " +
//                    Const.CONTRACT_TABLE + " C " + " INNER JOIN " + Const.USER_TABLE + " A ON " +
//                    "C." + Const.CONTRACT_ID_ADMIN + " = " +
//                    "A." + Const.USER_ID + " WHERE " +
//                    "C." + Const.CONTRACT_ID + " = " + id;
            query = "SELECT " +
                    Const.USER_NAME + "," +
                    Const.USER_LASTNAME + " FROM " +
                    Const.USER_TABLE + " WHERE " +
                    Const.USER_ID + " = " + idAdmin;
            rs = stms.executeQuery(query);
            rs.next();
            dbConnection.close();
            MainController.logMessage("Запрос на заявление по ID: " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
            String name, lastname;
            name = rs.getString(1).trim();
            lastname = rs.getString(2).trim();
            contrInfo = concatStrings(name, lastname);
        }

        //System.out.println(appInfo);
        //System.out.println(userInfo);
        //System.out.println(contrInfo);


        result = appInfo + Const.DELIMITER + userInfo + Const.DELIMITER + contrInfo;

        return result;
    }

    private String concatStrings(String... strings) {
        String result = "";
        for (String temp : strings) {
            result += temp + Const.DELIMITER;
        }
        result = result.substring(0, result.length() - 1);
        return result;
    }

    public void signUpUser(String user, String nPass, String nIdPass, String nPhone, String email, String password, String birthday, String login, String name, String lastName) throws SQLException, ClassNotFoundException {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

        UsersTable table = new UsersTable();
        String insert = insertQuery(table, table.getColumnsForInsert(), new String[]{nPass, nIdPass, nPhone, email, password, birthday, dateFormat.format(new Date()),
                user, login, name, lastName});

        //System.out.println(insert);

        PreparedStatement prSt = getDbConnection().prepareStatement(insert);
        prSt.executeUpdate();
        dbConnection.close();
        MainController.logMessage("Регистрация нового пользователя " + login + ": " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
    }

    public void addNewVehicleApp(String iDuser, String term, String beginWork, String fee, String typeMoney, String doljn, String experience, String model,
                                 String regNumber, String bodyNumb, String vEngine, String lifting, String seats, String powerEngine, String accidents, String year, String battery) throws SQLException, ClassNotFoundException {

//        String insert = "INSERT INTO " +
//                Const.VEHICLE_APP_TABLE + "(" +
//                Const.VEHICLE_APP_ID_USER + "," +
//                Const.VEHICLE_APP_TERM + "," +
//                Const.VEHICLE_APP_BEGIN_TERM + "," +
//                Const.VEHICLE_APP_FEE + "," +
//                Const.VEHICLE_APP_PAYMENT + "," +
//                Const.VEHICLE_APP_DOLJ + "," +
//                Const.VEHICLE_APP_EXPERIANCE + "," +
//                Const.VEHICLE_APP_MODEL + "," +
//                Const.VEHICLE_APP_SIGN + "," +
//                Const.VEHICLE_APP_BODY + "," +
//                Const.VEHICLE_APP_V_ENGINE + "," +
//                Const.VEHICLE_APP_LIFTING + "," +
//                Const.VEHICLE_APP_SEATS + "," +
//                Const.VEHICLE_APP_POWER + "," +
//                Const.VEHICLE_APP_ACCIDENTS + "," +
//                Const.VEHICLE_APP_YEAR + "," +
//                Const.VEHICLE_APP_BATTERY + "," +
//                Const.VEHICLE_APP_PROCESSED + ")VALUES(" +
//                iDuser + "," +
//                term + ",'" +
//                beginWork + "','" +
//                fee + "','" +
//                typeMoney + "','" +
//                doljn + "','" +
//                experience + "','" +
//                model + "','" +
//                regNumber + "','" +
//                bodyNumb + "','" +
//                vEngine + "','" +
//                lifting + "'," +
//                seats + "," +
//                powerEngine + "," +
//                accidents + "," +
//                year + ",'" +
//                battery + "', false)";
        VehicleAppTable table = new VehicleAppTable();
        String insert = insertQuery(table, table.getColumns(), new String[]{iDuser, term, beginWork, fee, typeMoney, doljn, experience, model, regNumber,
                bodyNumb, vEngine, lifting, seats, powerEngine, accidents, year, battery, "false"});

            //System.out.println(insert);

        PreparedStatement prSt = getDbConnection().prepareStatement(insert);
            prSt.executeUpdate();
        dbConnection.close();
        MainController.logMessage("Новое заявление на автомобиль от пользователя ID" + iDuser + ": " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
    }

    public void addNewPropertyApp(String iDuser, String term, String beginWork, String fee, String typeMoney, String doljn, String adress, String area,
                                 String rooms, String floor, String doors, String steelDoor, String codeLock, String unfireSystem, String security, String unfireMaterial, String highRisk, String year) throws SQLException, ClassNotFoundException {

        PropertyAppTable table = new PropertyAppTable();

        String insert = insertQuery(table, table.getColumnsForInsert(), new String[]{iDuser, term, beginWork, fee, typeMoney, doljn, adress, area, rooms, year, floor, doors,
                steelDoor, codeLock, unfireSystem, security, unfireMaterial, highRisk, "false"});

//        String insert = "INSERT INTO " +
//                Const.PROPERTY_APP_TABLE + "(" +
//                Const.PROPERTY_APP_ID_USER + "," +
//                Const.PROPERTY_APP_TERM + "," +
//                Const.PROPERTY_APP_BEGIN_TERM + "," +
//                Const.PROPERTY_APP_FEE + "," +
//                Const.PROPERTY_APP_PAYMENT + "," +
//                Const.PROPERTY_APP_DOLJ + "," +
//                Const.PROPERTY_APP_ADDRESS + "," +
//                Const.PROPERTY_APP_AREA + "," +
//                Const.PROPERTY_APP_ROOMS + "," +
//                Const.PROPERTY_APP_YEAR + "," +
//                Const.PROPERTY_APP_FLOOR + "," +
//                Const.PROPERTY_APP_DOORS + "," +
//                Const.PROPERTY_APP_STELLDOOR + "," +
//                Const.PROPERTY_APP_CODELOCK + "," +
//                Const.PROPERTY_APP_UNFIRE_SYSTEM + "," +
//                Const.PROPERTY_APP_SECURITY + "," +
//                Const.PROPERTY_APP_UNFIRE_MATERIAL + "," +
//                Const.PROPERTY_APP_RISK + "," +
//                Const.PROPERTY_APP_PROCESSED + ")VALUES(" +
//                iDuser + "," +
//                term + ",'" +
//                beginWork + "','" +
//                fee + "','" +
//                typeMoney + "','" +
//                doljn + "','" +
//                adress + "'," +
//                area + "," +
//                rooms + "," +
//                year + "," +
//                floor + "," +
//                doors + "," +
//                steelDoor + "," +
//                codeLock + "," +
//                unfireSystem + "," +
//                security + "," +
//                unfireMaterial + "," +
//                highRisk + ", false)";
        //System.out.println(insert);

        PreparedStatement prSt = getDbConnection().prepareStatement(insert);
        prSt.executeUpdate();
        dbConnection.close();
        MainController.logMessage("Новое заявление на недвижимость от пользователя ID" + iDuser + ": " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
    }

    public String newPressQuery(String id_user, String text){
        TechSupportTable table = new TechSupportTable();
        try {
            String insert = insertQuery(table, table.getColumnsForInsert(), new String[]{id_user, text, "false"});
            //System.out.println(insert);
            PreparedStatement prSt = getDbConnection().prepareStatement(insert);
            prSt.executeUpdate();
            dbConnection.close();
            MainController.logMessage("Новый вопрос от пользователя " + id_user + ": " + text + " : " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
            return "Ваше сообщение направлено в администрацию.";
        } catch (Exception e) {
            return e.toString();
        }
    }

    public String insertQuery(db_Table table, List<Pair<String, Object>> list, String[] values) {
        StringBuffer insert = new StringBuffer("INSERT INTO " + table.getNameTable() + "(");
        StringBuffer strValues = new StringBuffer();
        int i = 0;

        for (Pair<String, Object> column: list){
            insert.append(column.getKey()).append(",");
            if(column.getValue() instanceof Integer || column.getValue() instanceof Boolean) strValues.append(values[i++]).append(",");
            else if (column.getValue() instanceof String) strValues.append("'").append(values[i++]).append("',");
        }
        strValues.deleteCharAt(strValues.length() - 1);
        insert.deleteCharAt(insert.length() - 1);
        insert.append(")VALUES(").append(strValues).append(")");

        return insert.toString();

//        for (String column : Table.getColumns().keySet()) {
//            insert.append(column).append(",");
//
//        }
//        insert.deleteCharAt(insert.length() - 1);
//        insert.append(")VALUES(");
//        for (String value : values) {
//            insert.append(value).append(",");
//        }
//        insert.deleteCharAt(insert.length() - 1);
    }

    public void addNewHealthApp(String iDuser, String term, String beginWork, String fee, String typeMoney, String doljn, String harmHappend, String healthHappend,
                                  String invalidHappend, String deathHappend, String covid, String sport, String relax, String invalid12) throws SQLException, ClassNotFoundException, DBException {

        HealthAppTable table = new HealthAppTable();

        String insert = insertQuery(table, table.getColumnsForInsert(), new String[]{iDuser, term, beginWork, fee, typeMoney, doljn, harmHappend, healthHappend, invalidHappend, deathHappend,
                covid, sport, relax, invalid12, "false"});
        try {
            PreparedStatement prSt = getDbConnection().prepareStatement(insert);
            prSt.executeUpdate();
            dbConnection.close();
        } catch (PSQLException e) {
            throw new DBException();
        }
        MainController.logMessage("Новое заявление на здоровье от пользователя ID" + iDuser + ": " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
    }

    public void addNewContract(String id, String idAdmin, String date, String summ, String perMonth) throws Exception {
        String insert = "INSERT INTO " + Const.CONTRACT_TABLE + "(" +
                Const.CONTRACT_ID + "," +
                Const.CONTRACT_ID_ADMIN + "," +
                Const.CONTRACT_DATE + "," +
                Const.CONTRACT_SUM + "," +
                Const.CONTRACT_PER_MONTH + ")VALUES(" +
                id + "," +
                idAdmin + "," +
                date + ",'" +
                summ + "','" +
                perMonth + "')";
        //System.out.println(insert);

        PreparedStatement prSt = getDbConnection().prepareStatement(insert);
        prSt.executeUpdate();
        dbConnection.close();
        MainController.logMessage("Регистрация договора №" + id + ": " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());


        Integer intId = Integer.parseInt(id);
        String update = "UPDATE ";
        if (intId >= 300000) {
            update += Const.HEALTH_APP_TABLE + " SET " + Const.HEALTH_APP_PROCESSED + " = true WHERE " + Const.HEALTH_APP_ID + " = " + id;
        } else if (intId >= 200000) {
            update += Const.PROPERTY_APP_TABLE + " SET " + Const.PROPERTY_APP_PROCESSED + " = true WHERE " + Const.PROPERTY_APP_ID + " = " + id;
        } else if (intId >= 100000) {
            update += Const.VEHICLE_APP_TABLE + " SET " + Const.VEHICLE_APP_PROCESSED + " = true WHERE " + Const.VEHICLE_APP_ID + " = " + id;
        }
        getDbConnection().prepareStatement(update).executeUpdate();
        dbConnection.close();
    }

    public String generateFile(String id, String text) {
        File theDir = new File("contracts");
        if (!theDir.exists()) {
            if (theDir.mkdir()) {
                try {
                    File file = new File("contracts/" + id + ".txt");
                    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8));
                    writer.write(text);
                    writer.flush();
                    writer.close();
                    return "true";
                } catch (Exception e) {
                    return "false";
                }
            }
        }
        return "false";
    }

    public String deleteApplication(Integer id) throws Exception {
        String nameTable;
        String nameColumn;

        if (id >= 300000) {
            nameTable = Const.HEALTH_APP_TABLE;
            nameColumn = Const.HEALTH_APP_ID;
        }
        else if (id >= 200000) {
            nameTable = Const.PROPERTY_APP_TABLE;
            nameColumn = Const.PROPERTY_APP_ID;
        }
        else if (id >= 100000) {
            nameTable = Const.VEHICLE_APP_TABLE;
            nameColumn = Const.VEHICLE_APP_ID;
        }
        else return "false";

        String query = "DELETE FROM " + nameTable + " WHERE " + nameColumn + " = " + id;
        //System.out.println(query);

        getDbConnection().createStatement().executeUpdate(query);
        dbConnection.close();
        MainController.logMessage("Удаление заявления №" + id + ": " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        return "true";
    }

    public String deleteContract(String id) {
        String query = "DELETE FROM " + Const.CONTRACT_TABLE + " WHERE " + Const.CONTRACT_ID + " = " + id;
        //System.out.println(query);
        try {
            if (0 == getDbConnection().createStatement().executeUpdate(query))
                return "Договор не найден";
            dbConnection.close();
            MainController.logMessage("Удаление договора №" + id + ": " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        } catch (Exception e) { return e.toString(); }
        return "true";
    }

    public String deleteUser(String id) {
        try {
        ResultSet rs = getDbConnection().createStatement().executeQuery("SELECT " + Const.USER_IS_ADMIN + " FROM " + Const.USER_TABLE + " WHERE " + Const.USER_ID + " = " + id);
        dbConnection.close();
        rs.next();


        if(rs.getBoolean(1)) return "Админ";

        String query = "DELETE FROM " + Const.USER_TABLE + " WHERE " + Const.USER_ID + " = " + id;
        //System.out.println(query);

            if (0 == getDbConnection().createStatement().executeUpdate(query))
                return "Не найден";
            dbConnection.close();
            MainController.logMessage("Удаление пользователя ID" + id + ": " + client.getInetAddress().getCanonicalHostName() + ":" + client.getPort());
        } catch (Exception e) { return "Не найден"; }
        return "true";
    }
}

